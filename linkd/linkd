#!/usr/bin/python3

import datetime
import docker
import json
import os
import redis
import sys
import urllib.request


DOCKER_HOST = os.getenv('DOCKER_HOST')
DOCKER_API_BASE_URL = 'tcp://' + DOCKER_HOST
DOCKER_EVENT_API_URL = 'http://' + DOCKER_HOST + '/events'
REDIS_ADDR = os.getenv('REDIS_PORT_6379_TCP_ADDR')
REDIS_PORT = os.getenv('REDIS_PORT_6379_TCP_PORT')

CLIENT = docker.Client(base_url=DOCKER_API_BASE_URL)
EVENT = urllib.request.urlopen(DOCKER_EVENT_API_URL)
REDIS = redis.Redis(host=REDIS_ADDR, port=REDIS_PORT)


def getforwardinfo(container):
    inspect = CLIENT.inspect_container(container.get('Id'))
    env = inspect.get('Config').get('Env')

    name = next(filter(lambda x: 'DPROXY_FORWARD_NAME' in x, env), None)
    if name is None:
        return None
    name = name.split('=').pop()

    ipaddr = inspect.get('NetworkSettings').get('IPAddress')
    port = str(container.get('Ports').pop().get('PrivatePort'))
    forward = ipaddr + ':' + port

    return (name, forward)


def updateredis():
    info = []
    for c in CLIENT.containers():
        tmp = getforwardinfo(c)
        if tmp is None:
            continue
        info.append(tmp)

    REDIS.flushall()
    for name, forward in info:
        REDIS.set(name, forward)


def dumpredis():
    print(datetime.datetime.now().ctime())
    for k in REDIS.scan_iter():
        s = "%10s:\t%s" % (k.decode('utf-8'), REDIS.get(k).decode('utf-8'))
        print(s)


def readevent():
    x = []
    while True:
        c = EVENT.read(1)
        x.append(c)
        if c == b'}':
            break
    return b''.join(x).decode('utf-8')


def main():
    updateredis()
    dumpredis()
    while True:
        ev = readevent()
        status = json.loads(ev).get('status')
        if status in ('start', 'stop'):
            updateredis()
            dumpredis()


if __name__ == '__main__':
    main()
    exit(0)